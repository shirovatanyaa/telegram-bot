const TelegramBot = require('node-telegram-bot-api');
const { google } = require('googleapis');
require('dotenv').config();

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
function log(message) {
  const timestamp = new Date().toLocaleString('ru-RU');
  const logMessage = `[${timestamp}] ${message}`;
  console.log(logMessage);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvVars = [
  'TELEGRAM_BOT_TOKEN',
  'GOOGLE_SHEETS_ID', 
  'GOOGLE_SERVICE_ACCOUNT_EMAIL',
  'GOOGLE_PRIVATE_KEY'
];

for (const envVar of requiredEnvVars) {
  if (!process.env[envVar]) {
    log(`‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ${envVar} –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞`);
    process.exit(1);
  }
}

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { 
  polling: true,
  onlyFirstMatch: true
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets API
const auth = new google.auth.JWT(
  process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
  null,
  process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
  ['https://www.googleapis.com/auth/spreadsheets']
);

const sheets = google.sheets({ version: 'v4', auth });
const spreadsheetId = process.env.GOOGLE_SHEETS_ID;

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –¢–∏–ø—ã –æ—Ç—á–µ—Ç–æ–≤
const REPORT_TYPES = {
  MAIN: 'main',
  TRIAL: 'trial'
};

// –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
const MAIN_QUESTIONS = [
  { id: 'tutor', text: 'üìù –í–∞—à–µ –∏–º—è (—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):' },
  { id: 'date', text: 'üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2023):' },
  { id: 'chat', text: 'üí¨ –ù–æ–º–µ—Ä —Ä–∞–±–æ—á–µ–≥–æ —á–∞—Ç–∞:' },
  { id: 'parent', text: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –µ—Å–ª–∏ –Ω–µ—Ç - –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ—á–µ—Ä–∫ "-"):' },
  { id: 'student', text: 'üéì –ò–º—è —É—á–µ–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):' },
  { id: 'amount', text: 'üí∞ –°—É–º–º–∞ –∑–∞ –∑–∞–Ω—è—Ç–∏–µ (–≤ —Ä—É–±–ª—è—Ö, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–∞–ø—è—Ç—ã—Ö):' }
];

// –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
const TRIAL_QUESTIONS = [
  { id: 'tutor', text: 'üìù –í–∞—à–µ –∏–º—è (—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):' },
  { id: 'date', text: 'üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2023):' },
  { id: 'chat', text: 'üí¨ –ù–æ–º–µ—Ä —Ä–∞–±–æ—á–µ–≥–æ —á–∞—Ç–∞:' },
  { id: 'parent', text: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –µ—Å–ª–∏ –Ω–µ—Ç - –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ—á–µ—Ä–∫ "-"):' },
  { id: 'student', text: 'üéì –ò–º—è —É—á–µ–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):' },
  { id: 'amount', text: 'üí∞ –°—É–º–º–∞ –∑–∞ –∑–∞–Ω—è—Ç–∏–µ (–≤ —Ä—É–±–ª—è—Ö, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–∞–ø—è—Ç—ã—Ö):' }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã (70% –æ—Ç —Å—É–º–º—ã)
function calculatePayment(amount) {
  const numericAmount = parseInt(amount);
  if (isNaN(numericAmount)) return 0;
  return Math.round(numericAmount * 0.7);
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–æ—á–µ—Ä–∫)
function validateName(name) {
  const nameRegex = /^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-]+$/;
  return nameRegex.test(name);
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
function validateAmount(input) {
  const numbersOnly = /^\d+$/;
  return numbersOnly.test(input) && parseInt(input) > 0;
}

// –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç
async function writeToMainSheet(userData, userId, username) {
  try {
    const payment = calculatePayment(userData.amount);
    
    let userIdentifier = username || `user_${userId}`;
    if (!userIdentifier.startsWith('@') && userIdentifier !== `user_${userId}`) {
      userIdentifier = '@' + userIdentifier;
    }

    const response = await sheets.spreadsheets.values.append({
      spreadsheetId,
      range: '–û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç!A:G',
      valueInputOption: 'USER_ENTERED',
      resource: {
        values: [[
          userIdentifier,
          userData.tutor,
          userData.date,
          userData.chat,
          userData.parent,
          userData.student,
          userData.amount
        ]]
      }
    });

    log(`‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç: ${userData.student}`);
    return true;

  } catch (error) {
    log('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç:' + error.message);
    return false;
  }
}

// –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
async function writeToTrialSheet(userData, userId, username) {
  try {
    let userIdentifier = username || `user_${userId}`;
    if (!userIdentifier.startsWith('@') && userIdentifier !== `user_${userId}`) {
      userIdentifier = '@' + userIdentifier;
    }

    const response = await sheets.spreadsheets.values.append({
      spreadsheetId,
      range: '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥!A:G',
      valueInputOption: 'USER_ENTERED',
      resource: {
        values: [[
          userIdentifier,
          userData.tutor,
          userData.date,
          userData.chat,
          userData.parent,
          userData.student,
          userData.amount
        ]]
      }
    });

    log(`‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: ${userData.student}`);
    return true;

  } catch (error) {
    log('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:' + error.message);
    return false;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
async function initializeSheets() {
  try {
    // –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç
    await sheets.spreadsheets.values.update({
      spreadsheetId,
      range: '–û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç!A1:G1',
      valueInputOption: 'USER_ENTERED',
      resource: {
        values: [[
          '–¢–µ–ª–µ–≥—Ä–∞–º–º',
          '–†–µ–ø–µ—Ç–∏—Ç–æ—Ä',
          '–î–∞—Ç–∞',
          '–ß–∞—Ç',
          '–†–æ–¥–∏—Ç–µ–ª—å',
          '–£—á–µ–Ω–∏–∫',
          '–°—É–º–º–∞'
        ]]
      }
    });

    // –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - –î–û–ë–ê–í–õ–Ø–ï–ú –ó–ê–ì–û–õ–û–í–ö–ò
    await sheets.spreadsheets.values.update({
      spreadsheetId,
      range: '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥!A1:G1',
      valueInputOption: 'USER_ENTERED',
      resource: {
        values: [[
          '–¢–µ–ª–µ–≥—Ä–∞–º–º',
          '–†–µ–ø–µ—Ç–∏—Ç–æ—Ä',
          '–î–∞—Ç–∞',
          '–ß–∞—Ç',
          '–†–æ–¥–∏—Ç–µ–ª—å',
          '–£—á–µ–Ω–∏–∫',
          '–°—É–º–º–∞'
        ]]
      }
    });

    log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
  } catch (error) {
    log('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü:' + error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
function sendNextQuestion(chatId) {
  const userState = userStates.get(chatId);
  const questions = userState.reportType === REPORT_TYPES.MAIN ? MAIN_QUESTIONS : TRIAL_QUESTIONS;
  
  if (userState.currentQuestion < questions.length) {
    const question = questions[userState.currentQuestion];
    bot.sendMessage(chatId, question.text);
  } else {
    saveUserData(chatId);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async function saveUserData(chatId) {
  const userState = userStates.get(chatId);
  
  if (userState) {
    const user = userState.user;
    let success = false;

    if (userState.reportType === REPORT_TYPES.MAIN) {
      success = await writeToMainSheet(userState.answers, user.id, user.username || user.first_name);
    } else {
      success = await writeToTrialSheet(userState.answers, user.id, user.username || user.first_name);
    }
    
    if (success) {
      let summaryMessage = `‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\nüìä –°–≤–æ–¥–∫–∞:\n`;
      
      summaryMessage += `‚Ä¢ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä: ${userState.answers.tutor}\n`;
      summaryMessage += `‚Ä¢ –î–∞—Ç–∞: ${userState.answers.date}\n`;
      summaryMessage += `‚Ä¢ –ß–∞—Ç: ${userState.answers.chat}\n`;
      summaryMessage += `‚Ä¢ –†–æ–¥–∏—Ç–µ–ª—å: ${userState.answers.parent}\n`;
      summaryMessage += `‚Ä¢ –£—á–µ–Ω–∏–∫: ${userState.answers.student}\n`;
      summaryMessage += `‚Ä¢ –°—É–º–º–∞: ${userState.answers.amount} —Ä—É–±.\n`;
      
      summaryMessage += `\n–î–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start`;
      
      bot.sendMessage(chatId, summaryMessage);
    } else {
      bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /start');
    }
    
    userStates.delete(chatId);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const user = msg.from;
  
  const options = {
    reply_markup: {
      keyboard: [
        [{ text: 'üìä –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç' }],
        [{ text: 'üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥' }]
      ],
      resize_keyboard: true,
      one_time_keyboard: true
    }
  };
  
  const welcomeMessage = 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:\n\nüìä *–û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç* - –ø–æ–ª–Ω–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –ø–æ –∑–∞–Ω—è—Ç–∏—è–º\nüÜì *–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥* - —É—á–µ—Ç –ø—Ä–æ–±–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π';
  
  bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown', ...options });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  
  if (text === 'üìä –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç') {
    startMainReport(chatId, msg.from);
  } else if (text === 'üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥') {
    startTrialReport(chatId, msg.from);
  }
});

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
function startMainReport(chatId, user) {
  userStates.set(chatId, {
    currentQuestion: 0,
    user: user,
    reportType: REPORT_TYPES.MAIN,
    answers: {
      tutor: '',
      date: '',
      chat: '',
      parent: '',
      student: '',
      amount: ''
    }
  });
  
  bot.sendMessage(chatId, 'üìä –í—ã–±—Ä–∞–Ω *–û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç*\n\n–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ:', { parse_mode: 'Markdown' })
    .then(() => {
      sendNextQuestion(chatId);
    });
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
function startTrialReport(chatId, user) {
  userStates.set(chatId, {
    currentQuestion: 0,
    user: user,
    reportType: REPORT_TYPES.TRIAL,
    answers: {
      tutor: '',
      date: '',
      chat: '',
      parent: '',
      student: '',
      amount: ''
    }
  });
  
  bot.sendMessage(chatId, 'üÜì –í—ã–±—Ä–∞–Ω *–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥*\n\n–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ:', { parse_mode: 'Markdown' })
    .then(() => {
      sendNextQuestion(chatId);
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –∫–æ–º–∞–Ω–¥—ã
  if (!text || text.startsWith('/') || text === 'üìä –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç' || text === 'üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥') {
    return;
  }
  
  const userState = userStates.get(chatId);
  
  if (!userState) {
    bot.sendMessage(chatId, '–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞: /start');
    return;
  }
  
  const questions = userState.reportType === REPORT_TYPES.MAIN ? MAIN_QUESTIONS : TRIAL_QUESTIONS;
  const currentQuestionIndex = userState.currentQuestion;
  const currentQuestion = questions[currentQuestionIndex];
  
  let isValid = true;
  let errorMessage = '';
  
  switch (currentQuestion.id) {
    case 'tutor':
    case 'parent':
    case 'student':
      if (!validateName(text)) {
        isValid = false;
        errorMessage = '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–æ—á–µ—Ä–∫ "-".';
      }
      break;
      
    case 'date':
      const dateRegex = /^\d{2}\.\d{2}\.\d{4}$/;
      if (!dateRegex.test(text)) {
        isValid = false;
        errorMessage = '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2023)';
      }
      break;
      
    case 'amount':
      if (!validateAmount(text)) {
        isValid = false;
        errorMessage = '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã! –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –∑–∞–ø—è—Ç—ã—Ö –∏ —Ç–µ–∫—Å—Ç–∞.\n\n–ü—Ä–∏–º–µ—Ä: 1500';
      }
      break;
  }
  
  if (!isValid) {
    bot.sendMessage(chatId, errorMessage);
    return;
  }
  
  userState.answers[currentQuestion.id] = text;
  userState.currentQuestion++;
  
  if (userState.currentQuestion < questions.length) {
    bot.sendMessage(chatId, '‚úÖ –ü—Ä–∏–Ω—è—Ç–æ! –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:')
      .then(() => {
        sendNextQuestion(chatId);
      });
  } else {
    bot.sendMessage(chatId, '‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç! –°–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ...');
    saveUserData(chatId);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel
bot.onText(/\/cancel/, (msg) => {
  const chatId = msg.chat.id;
  
  if (userStates.has(chatId)) {
    userStates.delete(chatId);
    bot.sendMessage(chatId, '‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
  } else {
    bot.sendMessage(chatId, '–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–π –Ω–µ—Ç. –î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
initializeSheets().then(() => {
  log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
  log('Polling error:' + error.message);
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
process.on('uncaughtException', (error) => {
  log('‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ' + error.message);
  setTimeout(() => {
    log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
    process.exit(1);
  }, 3000);
});

process.on('unhandledRejection', (reason, promise) => {
  log('‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ–º–∏—Å: ' + reason);
  setTimeout(() => {
    log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
    process.exit(1);
  }, 3000);
});
